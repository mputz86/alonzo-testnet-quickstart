#!/usr/bin/env bash

# ====================================================================
# Main logic of the script
# ==========================================================
validate_wallet_id() {
  if [ -z $wallet_id ]; then
    echoerr "Wallet ID unspecified for operation '$operation'"
    exit 1
  fi
}

validate_wallet_dir() {
  if [ ! -d $wallet_dir ]; then
    echoerr "Wallet $wallet_id doesn't exist at $wallet_dir"
    exit 1
  fi
}

validate_wallet_dir_does_not_exist() {
  if [ -d $wallet_dir ]; then
    echoerr "Wallet $wallet_id already exists at $wallet_dir"
    exit 1
  fi
}

validate_script_file() {
  if [[ "$script_file" != *.plutus ]] || [ ! -f "$script_file" ]; then
    echoerr "Provided argument does not correspond to a plutus script file: $script_file"
    exit 1
  fi
}

main() {
  script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
  source "${script_dir}/lib/utils.sh"
  source "${script_dir}/lib/send.sh"

  wallet_dir="$NODE_HOME/wallet/$wallet_id"

  case $operation in
    address)
      validate_wallet_id
      validate_wallet_dir

      wallet_address_file="$wallet_dir/payment.addr"
      if [ ! -f $wallet_address_file ]; then
        echoerr "Address file for wallet $wallet_id doesn't exist at $wallet_address_file"
        exit 1
      fi

      cat $wallet_address_file
      ;;
    address-script)
      validate_script_file

      cardano-cli address build --payment-script-file $script_file --testnet-magic 7 --out-file /dev/stdout
      ;;
    balance)
      validate_wallet_id
      validate_wallet_dir

      wallet_address_file="$wallet_dir/payment.addr"
      if [ ! -f $wallet_address_file ]; then
        echoerr "Address file for wallet $wallet_id doesn't exist at $wallet_address_file"
        exit 1
      fi

      wallet_address=$(cat $wallet_address_file)
      utxos=$(cardano-cli query utxo --address $wallet_address --testnet-magic 7 --out-file /dev/stdout)
      amount_lovelace_total=$(echo $utxos | jq 'map(.value.lovelace) | add + 0')
      amount_lovelace_total_formatted=$(echo $amount_lovelace_total \
        | sed -r ':L;s=\b([0-9]+)([0-9]{3})\b=\1'\''\2=g;t L')
      amount_ada=$(($amount_lovelace_total / 1000000))
      amount_ada_formatted=$(echo $amount_ada \
        | sed -r ':L;s=\b([0-9]+)([0-9]{3})\b=\1'\''\2=g;t L')
      amount_lovelace=$(($amount_lovelace_total % 1000000))
      amount_lovelace_formatted=$(printf "%06d" $amount_lovelace)
      utxo_count=$(echo $utxos | jq 'length')
      utxo_refs=$(echo $utxos | jq -r 'to_entries | map({u: .key, vl: .value.value.lovelace, vd: .value.data}) | map("  " + .u[:10] + "..." + .u[-12:] + " " + (.vl|tostring) + (if .vd then " (Datum " + (.vd[:10]) + "..." + .vd[-10:] + ")" else "" end))   | join("\n")')

      style_ada=""
      style_reset=""
      if [[ $COLORTERM =~ ^(truecolor|24bit)$ ]]; then
          style_ada="\e[1m"
          style_reset="\e[0m"
      fi
      echo "Wallet: ${wallet_id}"
      echo -e "${style_ada}${amount_ada_formatted}${style_reset}.${amount_lovelace_formatted} Ada"
      if (( "$utxo_count" > 0 )); then
        echo "${utxo_count} UTxO:"
        echo "${utxo_refs}"
      fi
      ;;
    balance-script)
      validate_script_file

      script_address=$(cardano-cli address build --payment-script-file $script_file --testnet-magic 7 --out-file /dev/stdout)
      utxos=$(cardano-cli query utxo --address $script_address --testnet-magic 7 --out-file /dev/stdout)
      amount_lovelace_total=$(echo $utxos | jq 'map(.value.lovelace) | add + 0')
      amount_lovelace_total_formatted=$(echo $amount_lovelace_total \
        | sed -r ':L;s=\b([0-9]+)([0-9]{3})\b=\1'\''\2=g;t L')
      amount_ada=$(($amount_lovelace_total / 1000000))
      amount_ada_formatted=$(echo $amount_ada \
        | sed -r ':L;s=\b([0-9]+)([0-9]{3})\b=\1'\''\2=g;t L')
      amount_lovelace=$(($amount_lovelace_total % 1000000))
      amount_lovelace_formatted=$(printf "%06d" $amount_lovelace)
      utxo_count=$(echo $utxos | jq 'length')
      utxo_refs=$(echo $utxos | jq -r 'to_entries | map({u: .key, vl: .value.value.lovelace, vd: .value.data}) | map("  " + .u[:10] + "..." + .u[-12:] + " " + (.vl|tostring) + (if .vd then " (Datum " + (.vd[:10]) + "..." + .vd[-10:] + ")" else "" end))   | join("\n")')

      style_ada=""
      style_reset=""
      if [[ $COLORTERM =~ ^(truecolor|24bit)$ ]]; then
          style_ada="\e[1m"
          style_reset="\e[0m"
      fi
      echo "Script: ${script_file}"
      echo -e "${style_ada}${amount_ada_formatted}${style_reset}.${amount_lovelace_formatted} Ada"
      if (( "$utxo_count" > 0 )); then
        echo "${utxo_count} UTxO:"
        echo "${utxo_refs}"
      fi
      ;;
    utxos)
      validate_wallet_id
      validate_wallet_dir

      wallet_address_file="$wallet_dir/payment.addr"
      if [ ! -f $wallet_address_file ]; then
        echoerr "Address file for wallet $wallet_id doesn't exist at $wallet_address_file"
        exit 1
      fi

      wallet_address=$(cat $wallet_address_file)
      cardano-cli query utxo --address $wallet_address --testnet-magic 7 --out-file /dev/stdout
      ;;
    utxos-script)
      validate_script_file

      script_address=$(cardano-cli address build --payment-script-file $script_file --testnet-magic 7 --out-file /dev/stdout)
      cardano-cli query utxo --address $script_address --testnet-magic 7 --out-file /dev/stdout
      ;;
    create)
      validate_wallet_id
      validate_wallet_dir_does_not_exist

      echo "Creating wallet $wallet_id at $wallet_dir"
      mkdir -p $wallet_dir
      cd $wallet_dir

      # Create payment key pair
      cardano-cli address key-gen \
        --verification-key-file payment.vkey \
        --signing-key-file payment.skey

      # Create staking key pair
      cardano-cli stake-address key-gen \
        --verification-key-file stake.vkey \
        --signing-key-file stake.skey

      # Create staking address
      cardano-cli stake-address build \
        --stake-verification-key-file stake.vkey \
        --out-file stake.addr \
        --testnet-magic 7

      # Create payment address
      cardano-cli address build \
        --payment-verification-key-file payment.vkey \
        --stake-verification-key-file stake.vkey \
        --out-file payment.addr \
        --testnet-magic 7
      ;;
   remove)
      validate_wallet_id
      validate_wallet_dir

      if $yes; then
        confirmation='y'
      else
        read -p "Are you sure you want to remove wallet $wallet_id at $wallet_dir (y/n)? " -n 1 -r confirmation
        echo ""
      fi

      if [[ $confirmation =~ ^[Yy]$ ]]; then
        echo "Removing wallet $wallet_id"
        rm -rf $wallet_dir
      fi
      ;;
    signing-key)
      validate_wallet_id
      validate_wallet_dir

      wallet_signing_key_file="$wallet_dir/payment.skey"
      if [ ! -f $wallet_signing_key_file ]; then
        echoerr "Signing key file for wallet $wallet_id doesn't exist at $wallet_signing_key_file"
        exit 1
      fi

      echo -n $wallet_signing_key_file
      ;;
    verification-key)
      validate_wallet_id
      validate_wallet_dir

      wallet_verification_key_file="$wallet_dir/payment.vkey"
      if [ ! -f $wallet_verification_key_file ]; then
        echoerr "Signing key file for wallet $wallet_id doesn't exist at $wallet_verification_key_file"
        exit 1
      fi

      echo -n $wallet_verification_key_file
      ;;
    send)
      wallet_id=$sender
      validate_wallet_id
      validate_wallet_dir
      wallet_id=$receiver
      validate_wallet_id
      validate_wallet_dir
      wallet_id=$sender

      send \
        && submit
      ;;
    *)
      echoerr "Programming error: operation '$operation' not implemented."
      exit 9
  esac
}

# ====================================================================
# Parse command-line arguments and the evaluate main()
# ==========================================================

# Specify short and long options
OPTIONS=hy
LONGOPTS=help,yes

handle_args() {
  # Set defaults for variables
  yes=false

  # Handle option args
  while true; do
      case "$1" in
          -h|--help)
              show_help
              exit 0
              ;;
          -y|--yes)
              yes=true
              shift
              ;;
          --)
              shift
              break
              ;;
          *)
              echoerr "Unknown options provided: $@"
              exit 51
              ;;
      esac
  done

  if [[ "$#" -eq 0 ]]; then
    show_help
    exit 0
  fi

  operation="$1"
  shift

  # Handle positional args
  case "$operation" in
    address)
      wallet_id="$1"
      shift
      ;;
    address-script)
      script_file="$1"
      shift
      ;;
    balance)
      wallet_id="$1"
      shift
      ;;
    balance-script)
      script_file="$1"
      shift
      ;;
    utxos)
      wallet_id="$1"
      shift
      ;;
    utxos-script)
      script_file="$1"
      shift
      ;;
    create)
      wallet_id="$1"
      shift
      ;;
    remove)
      wallet_id="$1"
      shift
      ;;
    signing-key)
      wallet_id="$1"
      shift
      ;;
    verification-key)
      wallet_id="$1"
      shift
      ;;
    send)
      sender="$1"
      shift
      receiver="$1"
      shift
      echo "Remaining args $@"
      amount_to_send="$1"
      shift
      ;;
    *)
      # If no operation provided, then default to 'address'
      if [[ "$#" -eq 0 ]]; then
        wallet_id="$operation"
        operation="address"
      else
        echoerr "Unknown operation: $operation"
        exit 52
      fi
      ;;
  esac

  if [[ "$#" > 0 ]]; then
    echoerr "Unknown arguments provided for operation '$operation': '$@'"
    exit 53
  fi
}

show_help() {
  # Help message
  echo "$(basename "$0") - Helper script to handle \"wallets\" in"
  echo "the Alonzo Testnet. A \"wallet\" is a set of skeys/vkeys"
  echo "for payment/staking, plus a public address."
  echo ""
  echo "Usage: $(basename "$0") [OPTIONS] OPERATION (WALLET_ID | SCRIPT_FILE)"
  echo ""
  echo "Available options:"
  echo "  -h, --help                     display this help message"
  echo "  -y, --yes                      do not ask for confirmation of destructive operations"
  echo ""
  echo "Operations (default = address):"
  echo "  address WALLET_ID                  get the address for the wallet called WALLET_ID"
  echo "  address-script SCRIPT_FILE         get the address for a script located at SCRIPT_FILE"
  echo "  balance WALLET_ID                  get the balance for the wallet called WALLET_ID"
  echo "  balance-script SCRIPT_FILE         get the balance for a script located at SCRIPT_FILE"
  echo "  utxos WALLET_ID                    get the UTxOs for the wallet called WALLET_ID"
  echo "  utxos-script SCRIPT_FILE           get the UTxOs for a script located at SCRIPT_FILE"
  echo "  create WALLET_ID                   create a wallet called WALLET_ID"
  echo "  remove WALLET_ID                   remove the wallet called WALLET_ID"
  echo "  signing-key WALLET_ID              get the signing key for the wallet called WALLET_ID"
  echo "  verification-key WALLET_ID         get the verification key for the wallet called WALLET_ID"
  echo "  send WALLET_ID_SENDER  WALLET_ID_RECEIVER AMOUNT"
  echo "                                     send from WALLET_ID_SENDER to WALLET_ID_RECEIVER the AMOUNT"
}

echoerr (){
  cat <<< "$@" 1>&2;
}

# Test whether getopt works
! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
  echoerr "'getopt --test' failed"
  exit 101
fi

# Parse command-line arguments, canonicalizing in-place
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  echoerr "Failed to parse arguments"
  exit 102
fi

# Handle arguments
eval handle_args "$PARSED"

# Perform the main program
main
